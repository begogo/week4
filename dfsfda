[33mcommit 3be200442a830289335d1fac30cc75653cad0c90[m[33m ([m[1;36mHEAD -> [m[1;32mdevelop[m[33m, [m[1;31morigin/develop[m[33m)[m
Author: gongbu <asd@asd.com>
Date:   Thu May 13 17:29:06 2021 +0900

    전투 반복진행 구조, 몬스터 랜덤출현, 콘솔화면 정보창, 데미지공식 오류 수정, 게임오버 로직
    
    전투 반복진행 구조:
    - 탐색했을 시 랜덤 출현한 몬스터와 전투하는 구조 반복
    
    몬스터 랜덤출현:
    - HashMap 이용. Integer key에 몬스터 객체생성 value 대응
    - 랜덤 메서드 이용해 몬스터에 대응되는 key 랜덤 선택
    - A 몬스터 처치 후 A 몬스터가 다시 선택될 시 새로운 객체가 생성되는 게 아니라 기존 객체가 사용되기 때문에 hp 값이 0이므로 값 재설정
    
    콘솔화면 정보창:
    - 기본공격 수행할 때 마다 정보창 표시
    - 기타 가독성 고려 수정
    
    데미지공식 오류 수정: 정수형/실수형 형변환 통해 공식이 제대로 적용되도록 수정
    
    게임오버 로직: 플레이어 사망 시 프로그램 종료

[33mcommit 30b232c69cb861bf467c761825de3778ba6f6de6[m
Author: gongbu <asd@asd.com>
Date:   Thu May 13 04:22:59 2021 +0900

    경험치, 돈, 레벨, 힘스탯 로직 구현
    
    기초적인 메서드 활용 미숙으로 어려움이 있었다.
    전사가 경험치를 얻어야 하는데 고블린이 경험치를 얻는 이슈 발생
    - 원인은 기초적인 코드 작성 미숙으로 메서드를 사용하는 객체를 잘못 지정해 생긴 이슈인데 동기화 관련으로 착각해 그 쪽으로만 수정하다 많은 시간을 낭비함

[33mcommit 50cc1d138ac665b1d03ad47dc89df0bd24cd99ab[m
Author: gongbu <asd@asd.com>
Date:   Tue May 11 06:53:27 2021 +0900

    공속 구현 / 전투 텍스트 줄간격 수정(가독성) / Warrior 클래스 수정
    
    지금 생각해보니 warrior 객체를 굳이 싱글톤 패턴으로 구현할 필요는 없었다. 당시에는 attack 메서드 매개변수를 (공격자, 타겟)이라고 생각하는 큰 오류를 범해서 공격자를 어떻게 받아올지 고민하다가 그렇게 구현했었다.
    
    물론 게임 로직에서 플레이어가 조종하는 전사 캐릭터가 유일무이하다면 그렇게 할 수도 있겠지만 내 경우엔 단순히 매개변수를 어떻게 받아와서 정보를 이어갈지 고민하다가 생각해낸 방법이라 필요없을 것 같다.

[33mcommit 50265c8ad76327dcaf7d9fdfac54195da3a52eab[m
Author: gongbu <asd@asd.com>
Date:   Tue May 11 06:12:19 2021 +0900

    run(), attack() 메서드 구현위치 수정, 구현부 수정
    
    - 구현위치를 Unit 클래스 한 곳으로만 옮겨서 중복코드 없애고 확장성 고려
    - attack 메서드에서 불필요한 매개변수를 없애 Unit.attack(Unit) 형태로 자연스러운 구조로 수정
    - 콘솔 텍스트에 피해량 수치 추가
    - 체력이 0이하 일 때 체력 0처리

[33mcommit 9e272cb8839b6d3f4aa28e5a31671388b2f8f97d[m
Author: gongbu <asd@asd.com>
Date:   Mon May 10 20:18:13 2021 +0900

    run(), attack() 구현 위치 수정 / 각 유닛 클래스의 필드 및 생성자 수정
    
    1.run(), attack()
    - Unit 클래스에 있던 run(), attack()을 개별 유닛 클래스 각각에 적용
    - Unit 클래스 한 곳에 구현했을 때 유닛 각각마다 적용에 어려움이 있어서 일단 개별 유닛 클래스로 분리하고 추후 수정이 가능한지 확인할 계획
    
    2.각 유닛 클래스의 필드 및 생성자 수정
    - 수정이유: 스탯 등의 유닛 속성을 개별 유닛 클래스 필드에 만들어 놓으면 매개변수를 Unit으로 받았을 때 상속 받는 타입을 확인해서 다운캐스팅 해야만 그 필드를 참조할 수 있는 문제 발생
    - 해결방법: 개별 유닛 클래스에선 아무 필드 만들지 않고 Unit 클래스에 필요한 모든 필드를 구현 / 객체 생성 시 생성자에서 setter 활용해 Unit 클래스 필드의 값을 부여

[33mcommit 964eccd0b4354257a97d7ebe14377dcd8048a723[m
Author: gongbu <asd@asd.com>
Date:   Sat May 8 19:59:54 2021 +0900

    Warrior 클래스 구조를 싱글톤 패턴으로 변경
    
    - 문제상황
    1. 플레이어인 Warrior는 게임 안에서 오직 하나의 객체이며 전투 이전/이후 필드 값이 계속 이어져야 한다.
    2. 유닛 간 전투를 쓰레드로 구현할 때 오버라이딩된 run() 메서드는 매개변수 오버로딩을 할 수 없어서 main 메서드에서 생성된 Warrior 객체를 받을 수 없다.
    3. 따라서 기존 코드는 Warrior가 run() 메서드를 실행할 때 메서드 내에서 Warrior 객체를 새로 생성해서 실행했었는데 이것은 게임 규칙에 맞지 않다.
    
    - 시도한 접근: 싱글톤 패턴
    Warrior 클래스에 static 싱글톤 객체 생성, 기존 생성자는 private 으로 바꿔 다른 곳에서 객체 생성 차단, getInstance() 메서드로 싱글톤 객체 참조

[33mcommit 42eaedd67ecb6834278de0cff88c3202e854939a[m
Author: gongbu <asd@asd.com>
Date:   Sat May 8 07:33:19 2021 +0900

    구조 수정
    플레이어 유닛을 워리어만 남기고
    몬스터 유닛으로 고블린, 오크 추가

[33mcommit 27a87bf151c54fb30862c4e2edadceeebdd914c6[m
Author: gongbu <asd@asd.com>
Date:   Mon May 3 22:20:45 2021 +0900

    ADD
    Warrior, Healer, TestThread 클래스 추가

[33mcommit cefe4d5d85b32107d01e3eeef648030c8bcfee6d[m
Author: gongbu <asd@asd.com>
Date:   Mon May 3 20:00:42 2021 +0900

    ADD Unit 클래스

[33mcommit 6b10fe1fbbb1398b8cbe2090f3ccdf89f4280999[m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster[m[33m)[m
Author: gongbu <asd@asd.com>
Date:   Mon May 3 19:56:41 2021 +0900

    week4 Thread 프로젝트 생성
